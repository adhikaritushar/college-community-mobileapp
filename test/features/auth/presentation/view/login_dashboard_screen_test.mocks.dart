// Mocks generated by Mockito 5.4.4 from annotations
// in college_community/test/features/auth/presentation/view/login_dashboard_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:college_community/features/auth/domain/entities/request/login_params.dart'
    as _i11;
import 'package:college_community/features/auth/domain/usecase/admin_change_password_usecase.dart'
    as _i5;
import 'package:college_community/features/auth/domain/usecase/admin_login_usecase.dart'
    as _i2;
import 'package:college_community/features/auth/domain/usecase/faculty_change_password_usecase.dart'
    as _i6;
import 'package:college_community/features/auth/domain/usecase/faculty_login_usecase.dart'
    as _i4;
import 'package:college_community/features/auth/domain/usecase/student_change_password_usecase.dart'
    as _i7;
import 'package:college_community/features/auth/domain/usecase/student_login_usecase.dart'
    as _i3;
import 'package:college_community/features/auth/presentation/view_model/auth_cubit/auth_cubit.dart'
    as _i8;
import 'package:flutter/material.dart' as _i10;
import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAdminLoginUsecase_0 extends _i1.SmartFake
    implements _i2.AdminLoginUsecase {
  _FakeAdminLoginUsecase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStudentLoginUsecase_1 extends _i1.SmartFake
    implements _i3.StudentLoginUsecase {
  _FakeStudentLoginUsecase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFacultyLoginUsecase_2 extends _i1.SmartFake
    implements _i4.FacultyLoginUsecase {
  _FakeFacultyLoginUsecase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAdminChangePasswordUsecase_3 extends _i1.SmartFake
    implements _i5.AdminChangePasswordUsecase {
  _FakeAdminChangePasswordUsecase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFacultyChangePasswordUsecase_4 extends _i1.SmartFake
    implements _i6.FacultyChangePasswordUsecase {
  _FakeFacultyChangePasswordUsecase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStudentChangePasswordUsecase_5 extends _i1.SmartFake
    implements _i7.StudentChangePasswordUsecase {
  _FakeStudentChangePasswordUsecase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthState_6 extends _i1.SmartFake implements _i8.AuthState {
  _FakeAuthState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCubit extends _i1.Mock implements _i8.AuthCubit {
  @override
  _i2.AdminLoginUsecase get adminLoginUsecase => (super.noSuchMethod(
        Invocation.getter(#adminLoginUsecase),
        returnValue: _FakeAdminLoginUsecase_0(
          this,
          Invocation.getter(#adminLoginUsecase),
        ),
        returnValueForMissingStub: _FakeAdminLoginUsecase_0(
          this,
          Invocation.getter(#adminLoginUsecase),
        ),
      ) as _i2.AdminLoginUsecase);

  @override
  _i3.StudentLoginUsecase get studentLoginUsecase => (super.noSuchMethod(
        Invocation.getter(#studentLoginUsecase),
        returnValue: _FakeStudentLoginUsecase_1(
          this,
          Invocation.getter(#studentLoginUsecase),
        ),
        returnValueForMissingStub: _FakeStudentLoginUsecase_1(
          this,
          Invocation.getter(#studentLoginUsecase),
        ),
      ) as _i3.StudentLoginUsecase);

  @override
  _i4.FacultyLoginUsecase get facultyLoginUsecase => (super.noSuchMethod(
        Invocation.getter(#facultyLoginUsecase),
        returnValue: _FakeFacultyLoginUsecase_2(
          this,
          Invocation.getter(#facultyLoginUsecase),
        ),
        returnValueForMissingStub: _FakeFacultyLoginUsecase_2(
          this,
          Invocation.getter(#facultyLoginUsecase),
        ),
      ) as _i4.FacultyLoginUsecase);

  @override
  _i5.AdminChangePasswordUsecase get adminChangePasswordUsecase =>
      (super.noSuchMethod(
        Invocation.getter(#adminChangePasswordUsecase),
        returnValue: _FakeAdminChangePasswordUsecase_3(
          this,
          Invocation.getter(#adminChangePasswordUsecase),
        ),
        returnValueForMissingStub: _FakeAdminChangePasswordUsecase_3(
          this,
          Invocation.getter(#adminChangePasswordUsecase),
        ),
      ) as _i5.AdminChangePasswordUsecase);

  @override
  _i6.FacultyChangePasswordUsecase get facultyChangePasswordUsecase =>
      (super.noSuchMethod(
        Invocation.getter(#facultyChangePasswordUsecase),
        returnValue: _FakeFacultyChangePasswordUsecase_4(
          this,
          Invocation.getter(#facultyChangePasswordUsecase),
        ),
        returnValueForMissingStub: _FakeFacultyChangePasswordUsecase_4(
          this,
          Invocation.getter(#facultyChangePasswordUsecase),
        ),
      ) as _i6.FacultyChangePasswordUsecase);

  @override
  _i7.StudentChangePasswordUsecase get studentChangePasswordUsecase =>
      (super.noSuchMethod(
        Invocation.getter(#studentChangePasswordUsecase),
        returnValue: _FakeStudentChangePasswordUsecase_5(
          this,
          Invocation.getter(#studentChangePasswordUsecase),
        ),
        returnValueForMissingStub: _FakeStudentChangePasswordUsecase_5(
          this,
          Invocation.getter(#studentChangePasswordUsecase),
        ),
      ) as _i7.StudentChangePasswordUsecase);

  @override
  _i8.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_6(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeAuthState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.AuthState);

  @override
  _i9.Stream<_i8.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i8.AuthState>.empty(),
        returnValueForMissingStub: _i9.Stream<_i8.AuthState>.empty(),
      ) as _i9.Stream<_i8.AuthState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void selectedCategory({required String? category}) => super.noSuchMethod(
        Invocation.method(
          #selectedCategory,
          [],
          {#category: category},
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic loginDashBoard({
    required String? loginID,
    required String? password,
    required _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #loginDashBoard,
          [],
          {
            #loginID: loginID,
            #password: password,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void adminLogin({
    required String? loginID,
    required String? password,
    required _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #adminLogin,
          [],
          {
            #loginID: loginID,
            #password: password,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void studentLogin({
    required String? loginID,
    required String? password,
    required _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #studentLogin,
          [],
          {
            #loginID: loginID,
            #password: password,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void facultyLogin({
    required String? loginID,
    required String? password,
    required _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #facultyLogin,
          [],
          {
            #loginID: loginID,
            #password: password,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void adminChangePassword({
    required _i11.LoginParams? changePasswrod,
    required _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #adminChangePassword,
          [],
          {
            #changePasswrod: changePasswrod,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void facultyChangePassword({
    required _i11.LoginParams? changePasswrod,
    required _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #facultyChangePassword,
          [],
          {
            #changePasswrod: changePasswrod,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void studentChangePassword({
    required _i11.LoginParams? changePasswrod,
    required _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #studentChangePassword,
          [],
          {
            #changePasswrod: changePasswrod,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i12.Change<_i8.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}
