// Mocks generated by Mockito 5.4.4 from annotations
// in college_community/test/features/dashboards/student_dashboard/presentation/view/student_dashboard_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i17;

import 'package:college_community/features/auth/data/datasource/local_datasource/auth_local_datasource.dart'
    as _i24;
import 'package:college_community/features/marks/domain/entity/request/add_marks_params.dart'
    as _i19;
import 'package:college_community/features/marks/domain/usecase/add_marks_usecase.dart'
    as _i3;
import 'package:college_community/features/marks/domain/usecase/get_marks_usecase.dart'
    as _i2;
import 'package:college_community/features/marks/presentation/view_model.dart/cubit/marks_cubit.dart'
    as _i4;
import 'package:college_community/features/notice/domain/entities/request/notice_add_update_params.dart'
    as _i23;
import 'package:college_community/features/notice/domain/usecase/add_notice_usecase.dart'
    as _i13;
import 'package:college_community/features/notice/domain/usecase/delete_notice_usecase.dart'
    as _i15;
import 'package:college_community/features/notice/domain/usecase/get_notice_usecase.dart'
    as _i12;
import 'package:college_community/features/notice/domain/usecase/update_notice_usecase.dart'
    as _i14;
import 'package:college_community/features/notice/presentation/view_model/cubit/notice_cubit.dart'
    as _i16;
import 'package:college_community/features/subject/domain/entity/request/add_subject_parms.dart'
    as _i22;
import 'package:college_community/features/subject/domain/usecase/add_subject_usecase.dart'
    as _i9;
import 'package:college_community/features/subject/domain/usecase/delete_subject_usecase.dart'
    as _i10;
import 'package:college_community/features/subject/domain/usecase/get_subject_usecase.dart'
    as _i8;
import 'package:college_community/features/subject/presentation/view_model/cubit/subject_cubit.dart'
    as _i11;
import 'package:college_community/features/timetable/domain/entity/request/post_timetable_params.dart'
    as _i21;
import 'package:college_community/features/timetable/domain/usecase/get_timetable_usecase.dart'
    as _i5;
import 'package:college_community/features/timetable/domain/usecase/post_timetable_usecase.dart'
    as _i6;
import 'package:college_community/features/timetable/presentation/view_model/cubit/timetable_cubit.dart'
    as _i7;
import 'package:flutter/material.dart' as _i18;
import 'package:flutter_bloc/flutter_bloc.dart' as _i20;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMarksUsecase_0 extends _i1.SmartFake
    implements _i2.GetMarksUsecase {
  _FakeGetMarksUsecase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddMarksUsecase_1 extends _i1.SmartFake
    implements _i3.AddMarksUsecase {
  _FakeAddMarksUsecase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMarksState_2 extends _i1.SmartFake implements _i4.MarksState {
  _FakeMarksState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTimeTableUsecase_3 extends _i1.SmartFake
    implements _i5.GetTimeTableUsecase {
  _FakeGetTimeTableUsecase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostTimetableUsecase_4 extends _i1.SmartFake
    implements _i6.PostTimetableUsecase {
  _FakePostTimetableUsecase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimetableState_5 extends _i1.SmartFake
    implements _i7.TimetableState {
  _FakeTimetableState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetSubjectUsecase_6 extends _i1.SmartFake
    implements _i8.GetSubjectUsecase {
  _FakeGetSubjectUsecase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddSubjectUsecase_7 extends _i1.SmartFake
    implements _i9.AddSubjectUsecase {
  _FakeAddSubjectUsecase_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteSubjectUsecase_8 extends _i1.SmartFake
    implements _i10.DeleteSubjectUsecase {
  _FakeDeleteSubjectUsecase_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSubjectState_9 extends _i1.SmartFake implements _i11.SubjectState {
  _FakeSubjectState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetNoticeUsecase_10 extends _i1.SmartFake
    implements _i12.GetNoticeUsecase {
  _FakeGetNoticeUsecase_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddNoticeUsecase_11 extends _i1.SmartFake
    implements _i13.AddNoticeUsecase {
  _FakeAddNoticeUsecase_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateNoticeUsecase_12 extends _i1.SmartFake
    implements _i14.UpdateNoticeUsecase {
  _FakeUpdateNoticeUsecase_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteNoticeUsecase_13 extends _i1.SmartFake
    implements _i15.DeleteNoticeUsecase {
  _FakeDeleteNoticeUsecase_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNoticeState_14 extends _i1.SmartFake implements _i16.NoticeState {
  _FakeNoticeState_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MarksCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarksCubit extends _i1.Mock implements _i4.MarksCubit {
  @override
  _i2.GetMarksUsecase get getMarksUsecase => (super.noSuchMethod(
        Invocation.getter(#getMarksUsecase),
        returnValue: _FakeGetMarksUsecase_0(
          this,
          Invocation.getter(#getMarksUsecase),
        ),
        returnValueForMissingStub: _FakeGetMarksUsecase_0(
          this,
          Invocation.getter(#getMarksUsecase),
        ),
      ) as _i2.GetMarksUsecase);

  @override
  _i3.AddMarksUsecase get addMarksUsecase => (super.noSuchMethod(
        Invocation.getter(#addMarksUsecase),
        returnValue: _FakeAddMarksUsecase_1(
          this,
          Invocation.getter(#addMarksUsecase),
        ),
        returnValueForMissingStub: _FakeAddMarksUsecase_1(
          this,
          Invocation.getter(#addMarksUsecase),
        ),
      ) as _i3.AddMarksUsecase);

  @override
  _i4.MarksState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMarksState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMarksState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.MarksState);

  @override
  _i17.Stream<_i4.MarksState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i17.Stream<_i4.MarksState>.empty(),
        returnValueForMissingStub: _i17.Stream<_i4.MarksState>.empty(),
      ) as _i17.Stream<_i4.MarksState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void getMarks({required int? enrollmentNo}) => super.noSuchMethod(
        Invocation.method(
          #getMarks,
          [],
          {#enrollmentNo: enrollmentNo},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addMarks(
    _i18.BuildContext? context, {
    required _i19.AddMarksParams? params,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addMarks,
          [context],
          {#params: params},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.MarksState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i20.Change<_i4.MarksState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [TimetableCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimetableCubit extends _i1.Mock implements _i7.TimetableCubit {
  @override
  _i5.GetTimeTableUsecase get getTimeTableUsecase => (super.noSuchMethod(
        Invocation.getter(#getTimeTableUsecase),
        returnValue: _FakeGetTimeTableUsecase_3(
          this,
          Invocation.getter(#getTimeTableUsecase),
        ),
        returnValueForMissingStub: _FakeGetTimeTableUsecase_3(
          this,
          Invocation.getter(#getTimeTableUsecase),
        ),
      ) as _i5.GetTimeTableUsecase);

  @override
  _i6.PostTimetableUsecase get postTimetableUsecase => (super.noSuchMethod(
        Invocation.getter(#postTimetableUsecase),
        returnValue: _FakePostTimetableUsecase_4(
          this,
          Invocation.getter(#postTimetableUsecase),
        ),
        returnValueForMissingStub: _FakePostTimetableUsecase_4(
          this,
          Invocation.getter(#postTimetableUsecase),
        ),
      ) as _i6.PostTimetableUsecase);

  @override
  _i7.TimetableState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTimetableState_5(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTimetableState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.TimetableState);

  @override
  _i17.Stream<_i7.TimetableState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i17.Stream<_i7.TimetableState>.empty(),
        returnValueForMissingStub: _i17.Stream<_i7.TimetableState>.empty(),
      ) as _i17.Stream<_i7.TimetableState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void postTimetable({
    required _i21.PostTimetableParams? params,
    required _i18.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #postTimetable,
          [],
          {
            #params: params,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void getTimetable() => super.noSuchMethod(
        Invocation.method(
          #getTimetable,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.TimetableState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i20.Change<_i7.TimetableState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [SubjectCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubjectCubit extends _i1.Mock implements _i11.SubjectCubit {
  @override
  _i8.GetSubjectUsecase get getSubjectUsecase => (super.noSuchMethod(
        Invocation.getter(#getSubjectUsecase),
        returnValue: _FakeGetSubjectUsecase_6(
          this,
          Invocation.getter(#getSubjectUsecase),
        ),
        returnValueForMissingStub: _FakeGetSubjectUsecase_6(
          this,
          Invocation.getter(#getSubjectUsecase),
        ),
      ) as _i8.GetSubjectUsecase);

  @override
  _i9.AddSubjectUsecase get addSubjectUsecase => (super.noSuchMethod(
        Invocation.getter(#addSubjectUsecase),
        returnValue: _FakeAddSubjectUsecase_7(
          this,
          Invocation.getter(#addSubjectUsecase),
        ),
        returnValueForMissingStub: _FakeAddSubjectUsecase_7(
          this,
          Invocation.getter(#addSubjectUsecase),
        ),
      ) as _i9.AddSubjectUsecase);

  @override
  _i10.DeleteSubjectUsecase get deleteSubjectUsecase => (super.noSuchMethod(
        Invocation.getter(#deleteSubjectUsecase),
        returnValue: _FakeDeleteSubjectUsecase_8(
          this,
          Invocation.getter(#deleteSubjectUsecase),
        ),
        returnValueForMissingStub: _FakeDeleteSubjectUsecase_8(
          this,
          Invocation.getter(#deleteSubjectUsecase),
        ),
      ) as _i10.DeleteSubjectUsecase);

  @override
  _i11.SubjectState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSubjectState_9(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSubjectState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.SubjectState);

  @override
  _i17.Stream<_i11.SubjectState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i17.Stream<_i11.SubjectState>.empty(),
        returnValueForMissingStub: _i17.Stream<_i11.SubjectState>.empty(),
      ) as _i17.Stream<_i11.SubjectState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void getSubject() => super.noSuchMethod(
        Invocation.method(
          #getSubject,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addSubject({
    required _i22.AddSubjectParms? params,
    required _i18.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addSubject,
          [],
          {
            #params: params,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteSubject({
    required String? id,
    required _i18.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteSubject,
          [],
          {
            #id: id,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i11.SubjectState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i20.Change<_i11.SubjectState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [NoticeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoticeCubit extends _i1.Mock implements _i16.NoticeCubit {
  @override
  _i12.GetNoticeUsecase get getNoticeUsecase => (super.noSuchMethod(
        Invocation.getter(#getNoticeUsecase),
        returnValue: _FakeGetNoticeUsecase_10(
          this,
          Invocation.getter(#getNoticeUsecase),
        ),
        returnValueForMissingStub: _FakeGetNoticeUsecase_10(
          this,
          Invocation.getter(#getNoticeUsecase),
        ),
      ) as _i12.GetNoticeUsecase);

  @override
  _i13.AddNoticeUsecase get addNoticeUsecase => (super.noSuchMethod(
        Invocation.getter(#addNoticeUsecase),
        returnValue: _FakeAddNoticeUsecase_11(
          this,
          Invocation.getter(#addNoticeUsecase),
        ),
        returnValueForMissingStub: _FakeAddNoticeUsecase_11(
          this,
          Invocation.getter(#addNoticeUsecase),
        ),
      ) as _i13.AddNoticeUsecase);

  @override
  _i14.UpdateNoticeUsecase get updateNoticeUsecase => (super.noSuchMethod(
        Invocation.getter(#updateNoticeUsecase),
        returnValue: _FakeUpdateNoticeUsecase_12(
          this,
          Invocation.getter(#updateNoticeUsecase),
        ),
        returnValueForMissingStub: _FakeUpdateNoticeUsecase_12(
          this,
          Invocation.getter(#updateNoticeUsecase),
        ),
      ) as _i14.UpdateNoticeUsecase);

  @override
  _i15.DeleteNoticeUsecase get deleteNoticeUsecase => (super.noSuchMethod(
        Invocation.getter(#deleteNoticeUsecase),
        returnValue: _FakeDeleteNoticeUsecase_13(
          this,
          Invocation.getter(#deleteNoticeUsecase),
        ),
        returnValueForMissingStub: _FakeDeleteNoticeUsecase_13(
          this,
          Invocation.getter(#deleteNoticeUsecase),
        ),
      ) as _i15.DeleteNoticeUsecase);

  @override
  _i16.NoticeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNoticeState_14(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNoticeState_14(
          this,
          Invocation.getter(#state),
        ),
      ) as _i16.NoticeState);

  @override
  _i17.Stream<_i16.NoticeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i17.Stream<_i16.NoticeState>.empty(),
        returnValueForMissingStub: _i17.Stream<_i16.NoticeState>.empty(),
      ) as _i17.Stream<_i16.NoticeState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void getNotice(_i18.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #getNotice,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addNotice({
    required _i23.NoticeAddUpdateParams? params,
    required _i18.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addNotice,
          [],
          {
            #params: params,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateNotice({
    required _i23.NoticeAddUpdateParams? params,
    required _i18.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateNotice,
          [],
          {
            #params: params,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteNotice({
    required String? id,
    required _i18.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteNotice,
          [],
          {
            #id: id,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i16.NoticeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i20.Change<_i16.NoticeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [AuthLocalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalService extends _i1.Mock implements _i24.AuthLocalService {}
